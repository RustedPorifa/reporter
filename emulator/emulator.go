package emulator

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gotd/td/session"
	"github.com/gotd/td/telegram"
	"github.com/gotd/td/tg"
)

var (
	emojis  = []string{"‚ù§Ô∏è‚Äçüî•", "‚ù§Ô∏è", "ü•∞", "üèÜ"}
	emojiMu sync.Mutex
)

func humanDelay(minSec, maxSec int) {
	r := rand.Intn(maxSec-minSec) + minSec
	time.Sleep(time.Duration(r) * time.Second)
}

func buildSession(sessionPath string, ctx context.Context) (*telegram.Client, error) {
	dataBytes, err := os.ReadFile(sessionPath)
	if err != nil {
		fmt.Println("Error reading session file:", err)
		return nil, err
	}

	var data *session.Data
	if err := json.Unmarshal(dataBytes, &data); err != nil {
		fmt.Println("Error unmarshaling session:", err)
		return nil, err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
	storage := &session.StorageMemory{}
	loader := session.Loader{Storage: storage}
	if err := loader.Save(ctx, data); err != nil {
		fmt.Println("Error loading session into storage:", err)
		return nil, err
	}
	client := telegram.NewClient(telegram.TestAppID, telegram.TestAppHash, telegram.Options{
		SessionStorage:      storage,
		ReconnectionBackoff: nil,
		NoUpdates:           true,
		MaxRetries:          2,
	})
	return client, nil

}
func EmulateActivity() {
	var accountsPool = []string{}
	entry, _ := os.ReadDir("LoadedSessions")
	for _, file := range entry {
		accountsPool = append(accountsPool, filepath.Join("LoadedSessions", file.Name()))
	}
	for {
		rand.Shuffle(len(accountsPool), func(i, j int) {
			accountsPool[i], accountsPool[j] = accountsPool[j], accountsPool[i]
		})

		selected := accountsPool[:rand.Intn(len(accountsPool))+1] // +1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 0
		var wg sync.WaitGroup

		for _, path := range selected {
			wg.Add(1)
			go func(p string) {
				defer wg.Done()
				processAccount(p)
			}(path)
		}
		wg.Wait() // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
		time.Sleep(time.Duration(rand.Intn(30)) * time.Minute)
	}
}
func JoinChannelWithRotation(channelUsername string, bot *tgbotapi.BotAPI, chatToSend int64) {
	var accountsPool []string
	entries, _ := os.ReadDir("sessions")
	for _, file := range entries {
		accountsPool = append(accountsPool, filepath.Join("sessions", file.Name()))
	}

	for len(accountsPool) > 0 {
		batchSize := rand.Intn(7) + 4
		if batchSize > len(accountsPool) {
			batchSize = len(accountsPool)
		}

		// 4. –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
		rand.Shuffle(len(accountsPool), func(i, j int) {
			accountsPool[i], accountsPool[j] = accountsPool[j], accountsPool[i]
		})
		batch := accountsPool[:batchSize]

		// 5. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
		var wg sync.WaitGroup
		for _, path := range batch {
			wg.Add(1)
			go func(sessionPath string) {
				defer wg.Done()
				ProcessAndJoin(sessionPath, channelUsername)
			}(path)
		}
		wg.Wait()

		// 6. –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø—É–ª–∞
		accountsPool = accountsPool[batchSize:]

		// 7. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç—ã)
		if len(accountsPool) > 0 {
			jitter := time.Duration(rand.Intn(6) - 3)
			pause := 20*time.Minute + jitter*time.Minute
			time.Sleep(pause)
		}
	}
	msg := tgbotapi.NewMessage(chatToSend, "–ù–∞–∫—Ä—É—Ç–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ–∫–æ–Ω—á–µ–Ω–∞. –ö–∞–Ω–∞–ª: "+channelUsername)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
func processAccount(path string) {
	ctx := context.Background()
	client, err := buildSession(path, ctx)
	if err != nil {
		log.Println("NEW ERROR WHHILE BUILDING", err)
		return
	}

	actionCtx, cancel := context.WithTimeout(ctx, time.Duration(rand.Intn(4))*time.Minute)
	defer cancel() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ processAccount

	// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if err := client.Run(actionCtx, func(ctx context.Context) error {
		errRead := readChats(ctx, client.API()) // –î–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å ctx!
		if errRead != nil {
			log.Println("NEW ERROR OCCURED", errRead)
		}
		return nil
	}); err != nil {
		log.Println("NEW ERORR WHILE LOAD SESSION: ", err)
	}
}
func ProcessAndJoin(path string, channel string) {
	ctx := context.Background()
	client, err := buildSession(path, ctx)
	if err != nil {
		log.Println("NEW ERROR WHHILE BUILDING", err)
		return
	}

	actionCtx, cancel := context.WithTimeout(ctx, time.Duration(rand.Intn(4))*time.Minute)
	defer cancel()

	if err := client.Run(actionCtx, func(ctx context.Context) error {
		JoinChannel(actionCtx, client.API(), channel)
		return nil
	}); err != nil {
		log.Println("NEW ERORR WHILE LOAD SESSION: ", err)
	}
}

func JoinChannel(ctx context.Context, api *tg.Client, channelUsername string) error {
	const max_retries = 5
	for attempt := 0; attempt < max_retries; attempt++ {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –≤ –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
		res, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
			Username: channelUsername,
		})
		if err != nil {
			fmt.Printf("Resolve username attempt %d: %v\n", attempt+1, err)
			humanDelay(2, 5)
			continue
		}

		// –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
		var targetChannel *tg.Channel
		for _, chat := range res.Chats {
			if channel, ok := chat.(*tg.Channel); ok && channel.Username == channelUsername {
				targetChannel = channel
				break
			}
		}

		if targetChannel == nil {
			return errors.New("channel not found in resolved entities")
		}

		// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
		if targetChannel.Left {
			inputChannel := &tg.InputChannel{
				ChannelID:  targetChannel.ID,
				AccessHash: targetChannel.AccessHash,
			}

			if _, err := api.ChannelsJoinChannel(ctx, inputChannel); err != nil {
				fmt.Printf("Join channel attempt %d: %v\n", attempt+1, err)
				humanDelay(3, 7)
				continue
			}
			fmt.Printf("‚úÖ Joined channel: %s\n", targetChannel.Title)
			time.Sleep(3 * time.Second) // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
			readChannel(ctx, api, channelUsername)
		}

		return nil
	}
	return errors.New("max retries exceeded")
}

func readChannel(ctx context.Context, api *tg.Client, channelUsername string) error {
	const max_retries = 3
	for attempt := 0; attempt < max_retries; attempt++ {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –≤ –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
		res, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
			Username: channelUsername,
		})
		if err != nil {
			fmt.Printf("Resolve username attempt %d: %v\n", attempt+1, err)
			humanDelay(2, 5)
			continue
		}

		// –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
		var targetChannel *tg.Channel
		for _, chat := range res.Chats {
			if channel, ok := chat.(*tg.Channel); ok && channel.Username == channelUsername {
				targetChannel = channel
				break
			}
		}

		if targetChannel == nil {
			return errors.New("channel not found in resolved entities")
		}

		// –°–æ–∑–¥–∞–µ–º InputChannel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
		inputChannel := &tg.InputChannel{
			ChannelID:  targetChannel.ID,
			AccessHash: targetChannel.AccessHash,
		}

		// –°–æ–∑–¥–∞–µ–º InputPeerChannel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
		peer := &tg.InputPeerChannel{
			ChannelID:  targetChannel.ID,
			AccessHash: targetChannel.AccessHash,
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		history, err := api.MessagesGetHistory(ctx, &tg.MessagesGetHistoryRequest{
			Peer:  peer,
			Limit: 10, // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
		})
		if err != nil {
			fmt.Printf("Get history error: %v\n", err)
			return fmt.Errorf("get history: %w", err)
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–∞
		var messages []tg.MessageClass
		switch h := history.(type) {
		case *tg.MessagesMessages:
			messages = h.Messages
		case *tg.MessagesMessagesSlice:
			messages = h.Messages
		case *tg.MessagesChannelMessages:
			messages = h.Messages
		default:
			fmt.Printf("Unhandled history type: %T\n", h)
			return errors.New("unexpected history type")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
		if len(messages) == 0 {
			fmt.Println("No messages to read")
			return nil
		}

		// –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
		var maxMsgID int
		for _, msg := range messages {
			if msg.GetID() > maxMsgID {
				maxMsgID = msg.GetID()
			}
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º ChannelsReadHistory —Å InputChannel
		if _, err := api.ChannelsReadHistory(ctx, &tg.ChannelsReadHistoryRequest{
			Channel: inputChannel,
			MaxID:   maxMsgID,
		}); err != nil {
			fmt.Printf("Read history error: %v\n", err)
		} else {
			fmt.Printf("üìñ Marked %d messages as read\n", len(messages))
		}

		// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		for i, msg := range messages {
			humanDelay(1, 2)

			emojiMu.Lock()
			randomEmoji := emojis[rand.Intn(len(emojis))]
			emojiMu.Unlock()

			if _, err := api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
				Peer:     peer,
				MsgID:    msg.GetID(),
				Reaction: []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: randomEmoji}},
			}); err != nil {
				fmt.Printf("Reaction %d error: %v\n", i+1, err)
			} else {
				fmt.Printf("%s Reacted to message %d\n", randomEmoji, msg.GetID())
			}
			humanDelay(1, 2)
		}

		return nil
	}
	return errors.New("max retries exceeded")
}

func readChats(ctx context.Context, api *tg.Client) error {
	req := tg.MessagesGetDialogsRequest{
		Limit:      6,
		OffsetPeer: &tg.InputPeerEmpty{},
	}
	dialogs, err := api.MessagesGetDialogs(ctx, &req)
	if err != nil {
		println(err.Error())
	}
	var chats []tg.ChatClass
	switch d := dialogs.(type) {
	case *tg.MessagesDialogs:
		chats = d.Chats
	case *tg.MessagesDialogsSlice:
		chats = d.Chats
	default:
		return errors.New("unsupported dialog type")
	}

	// 3. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	rand.Shuffle(len(chats), func(i, j int) {
		chats[i], chats[j] = chats[j], chats[i]
	})
	for _, chat := range chats {
		// –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (5-30 —Å–µ–∫—É–Ω–¥)
		humanDelay(5, 30)

		switch c := chat.(type) {
		case *tg.Channel:
			// 5. –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
			if rand.Float32() < 0.1 {
				continue
			}

			// 6. –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (1-5)
			messagesLimit := rand.Intn(5) + 1

			// 7. –°–æ–∑–¥–∞–µ–º peer –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ ResolveUsername)
			peer := &tg.InputPeerChannel{
				ChannelID:  c.ID,
				AccessHash: c.AccessHash,
			}

			// 8. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
			history, err := api.MessagesGetHistory(ctx, &tg.MessagesGetHistoryRequest{
				Peer:  peer,
				Limit: messagesLimit,
			})
			if err != nil {
				log.Printf("History error in %s: %v", c.Title, err)
				continue
			}

			// 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
			var messages []tg.MessageClass
			switch h := history.(type) {
			case *tg.MessagesMessages:
				messages = h.Messages
			case *tg.MessagesMessagesSlice:
				messages = h.Messages
			case *tg.MessagesChannelMessages:
				messages = h.Messages
			default:
				continue
			}

			// 10. –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
			if len(messages) > 0 {
				maxID := messages[len(messages)-1].GetID()
				if _, err := api.ChannelsReadHistory(ctx, &tg.ChannelsReadHistoryRequest{
					Channel: &tg.InputChannel{
						ChannelID:  c.ID,
						AccessHash: c.AccessHash,
					},
					MaxID: maxID,
				}); err != nil {
					log.Printf("Read error in %s: %v", c.Title, err)
				}
			}

			// rand.Float32() < 0.3 &&
			if len(messages) > 0 {
				// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				msg := messages[rand.Intn(len(messages))]

				// –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π
				humanDelay(1, 5)

				// –°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
				emojiMu.Lock()
				emoji := emojis[rand.Intn(len(emojis))]
				emojiMu.Unlock()

				if _, err := api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
					Peer:     peer,
					MsgID:    msg.GetID(),
					Reaction: []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: emoji}},
				}); err != nil {
					log.Printf("Reaction error: %v", err)
				}
			}
		}
	}
	return nil
}
